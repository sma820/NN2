pipeline {
    agent any
    
    tools {
        gradle 'stackGradle' // Use configured Gradle in Jenkins
    }

    stages {
        stage('Setup MongoDB Container') {
            when { expression { false }  }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'docker-ssh', keyFileVariable: 'SSH_KEY')]) {
                    // Check if the network exists, if not create it
                    sh '''
                        ssh -i $SSH_KEY -o StrictHostKeyChecking=no $DOCKER_HOST '
                            docker network inspect "naaia_network" || docker network create "naaia_network"
                        '
                    '''

                    // Check if the MongoDB container exists, if not create and run it
                    sh '''
                        ssh -i $SSH_KEY -o StrictHostKeyChecking=no $DOCKER_HOST '
                            if [ "$(docker ps -a -q -f "name=mongodb")" ]; then
                                echo "MongoDB container exists."
                            else
                                echo "MongoDB container does not exist, creating it..."
                                docker run -d --restart unless-stopped -p 27017:27017 \
                                    --network "naaia_network" \
                                    --name "mongodb" \
                                    -e MONGO_INITDB_ROOT_USERNAME=sa \
                                    -e MONGO_INITDB_ROOT_PASSWORD=password \
                                    mongo:latest
                                sleep 5
                                if [ "$(docker ps -q -f "name=mongo")" ]; then
                                    echo "MongoDB successfully started."
                                else
                                    echo "Error: MongoDB failed to start."
                                    exit 1
                                fi
                            fi
                            
                            if [ "$(docker ps -q -f "name=mongodb")" ]; then
                                echo "MongoDB container is already running."
                            else
                                echo "Starting MongoDB container..."
                                docker start mongodb
                                sleep 5
                                if [ "$(docker ps -q -f "name=mongodb")" ]; then
                                    echo "MongoDB successfully started."
                                else
                                    echo "Error: MongoDB failed to start."
                                    exit 1
                                fi
                            fi
                        '
                    '''
                    
                    
                }
            }
        }
  
        stage('Cleanup') {
            when { expression { false }  }
            steps {
                deleteDir() // Deletes the contents of the workspace
            }
        }
        
        stage("Checkout micro-services") {
            when { expression { false }  }
            steps {
                git(url: 'http://git.abilityell.com/StackOpsMaster/service_na_aia.git', 
                    credentialsId: 'gitea-20241112', branch: 'master')
            }
        }
        
        stage('Run Unit Tests') {
            when { expression { false }  }
            steps {
                // Run unit tests
                script {
                    // Running the unit tests (unitTest task in your Gradle build)
                    dir('eventAPI') {
                        // This will execute Gradle unitTest task within the eventAPI directory
                        sh 'gradle unitTest'
                    }
                }
            }
        }
        
        stage("Build JARs") {
            when { expression { false }  }
            steps {
                script {
                    sh '''
                        pwd;
                        
                        echo "Building eventAPI...";
                        cd eventAPI;
                        ls;
                        gradle clean bootJar ;
                        
                        echo "Building userAPI...";
                        cd ../userAPI;
                        ls;
                        gradle clean bootJar ;
                    '''    
                }
            }
        }
        
        stage("Transfer JARs to Docker Server") {
            when { expression { false }  }
            steps {
                sh '''
                    echo "Transferring userAPI JAR";
                    ls -l userAPI/build/libs/;
                    cp userAPI/build/libs/userAPI-1.0.jar /home/jenkins/userAPI/userAPI-1.0.jar
                    cp userAPI/Dockerfile /home/jenkins/userAPI/Dockerfile;
                
                    echo "Transferring eventAPI JAR";
                    ls -l eventAPI/build/libs/;
                    cp eventAPI/build/libs/eventAPI-1.0.jar /home/jenkins/eventAPI/eventAPI-1.0.jar
                    cp eventAPI/Dockerfile /home/jenkins/eventAPI/Dockerfile;
                '''
            }
        }
        
        stage("Deploy Docker Containers") {
            when { expression { false }  }
            steps {
                sh '''
                    docker stop userapi-container || true;
                    docker rm userapi-container || true;
                    cd /home/jenkins/userAPI;
                    docker build -t userapi:latest .;
                    docker run -d --name userapi-container --network "naaia_network" -p 9081:8080 userapi:latest;
                    
                    docker stop eventapi-container || true;
                    docker rm eventapi-container || true;
                    cd /home/jenkins/eventAPI;
                    docker build -t eventapi:latest .;
                    docker run -d --name eventapi-container --network "naaia_network" -p 9082:8080 eventapi:latest;
                '''
            }
        }
        
        stage('Run API Tests') {
            when { expression { true }  }
            steps {
                // Run API tests
                script {
                    // Running the API tests (apiTest task in your Gradle build)
                    dir('eventAPI') {
                        // This will execute Gradle unitTest task within the eventAPI directory
                        sh 'gradle apiTest'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            when { expression { false }  }
            steps {
                // Example of SonarQube analysis (if using SonarQube in Jenkins)
                withSonarQubeEnv('SonarQube') {
                    sh './gradlew sonarqube'
                }
            }
        }

        
        stage("Checkout and build react app") {
            when { expression { false }  }
            steps {
                git(url: 'http://git.abilityell.com/StackOpsMaster/client_na_aia.git', 
                    credentialsId: '1e0500bd-1507-4fe2-885b-e6ec81e4a404', branch: 'main')
                
                withEnv(['CI=false']) {     //ignore warning
                    sh 'npm install'
                    sh 'npm run build'
                }    
                
                sh '''
                    echo "build react ..."
                    pwd 
                    ls -l build 
                '''
            }
        }
        stage("Deploy React App") {
            when { expression { false }  }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'docker-ssh', keyFileVariable: 'SSH_KEY')]) {
                    sh '''
                        scp -i $SSH_KEY -o StrictHostKeyChecking=no -r build/* $DOCKER_HOST:/var/www/html/
                        
                        ssh -i $SSH_KEY -o StrictHostKeyChecking=no $DOCKER_HOST 'chmod -R 755 /var/www/html/*'
                    '''
                }
            }
        }    
        stage("E2E Testing") {
            when { expression { false }  }
            steps {
                sh 'ls'
            }
        }    
    }
}
