{
  "openapi": "3.0.0",
  "info": {
    "title": "Event Management API",
    "description": "API for managing events, including creating, listing, retrieving, subscribing, and canceling events.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/events": {
      "get": {
        "summary": "List all events",
        "responses": {
          "200": {
            "description": "A list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Event" }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an event",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Event" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created successfully"
          },
          "401": {
            "description": "Unauthorized - Bearer token missing or invalid"
          }
        }
      }
    },
    "/events/{id}": {
       "get": {
        "summary": "Retrieve an event by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event found"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "put": {
        "summary": "Update an event",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Event" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event updated successfully"
          },
          "401": {
            "description": "Unauthorized - Bearer token missing or invalid"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "summary": "Cancel an event",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Event canceled successfully"
          },
          "401": {
            "description": "Unauthorized - Bearer token missing or invalid"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/events/subscribe": {
      "post": {
        "summary": "Check if a user is subscribed to an event",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User is subscribed to the event"
          },
          "404": {
            "description": "User is not subscribed to the event"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"           
          },
          "description": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}